{"ast":null,"code":"import React,{createContext,useState,useContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const ThemeProvider=_ref=>{let{children}=_ref;const[isDarkTheme,setIsDarkTheme]=useState(true);const theme={isDarkTheme,background:isDarkTheme?'#000000':'#ffffff',text:isDarkTheme?'#ffffff':'#000000',primary:isDarkTheme?'#00FFFF':'#008B8B',secondary:isDarkTheme?'#008B8B':'#006666',navBackground:isDarkTheme?'rgba(0, 0, 0, 0.9)':'rgba(255, 255, 255, 0.9)',cardBackground:isDarkTheme?'rgba(255, 255, 255, 0.05)':'rgba(0, 0, 0, 0.05)',cardBorder:isDarkTheme?'rgba(255, 255, 255, 0.1)':'rgba(0, 0, 0, 0.1)',shadow:isDarkTheme?'0 4px 6px rgba(0, 255, 255, 0.1)':'0 4px 6px rgba(0, 0, 0, 0.1)',hoverColor:isDarkTheme?'#00FFFF':'#008B8B'};const toggleTheme=()=>{setIsDarkTheme(!isDarkTheme);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,isDarkTheme,toggleTheme},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","isDarkTheme","setIsDarkTheme","theme","background","text","primary","secondary","navBackground","cardBackground","cardBorder","shadow","hoverColor","toggleTheme","Provider","value","useTheme","context","undefined","Error"],"sources":["D:/OPTIMUS/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(true);\r\n  \r\n  const theme = {\r\n    isDarkTheme,\r\n    background: isDarkTheme ? '#000000' : '#ffffff',\r\n    text: isDarkTheme ? '#ffffff' : '#000000',\r\n    primary: isDarkTheme ? '#00FFFF' : '#008B8B',\r\n    secondary: isDarkTheme ? '#008B8B' : '#006666',\r\n    navBackground: isDarkTheme ? 'rgba(0, 0, 0, 0.9)' : 'rgba(255, 255, 255, 0.9)',\r\n    cardBackground: isDarkTheme ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)',\r\n    cardBorder: isDarkTheme ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',\r\n    shadow: isDarkTheme ? '0 4px 6px rgba(0, 255, 255, 0.1)' : '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n    hoverColor: isDarkTheme ? '#00FFFF' : '#008B8B'\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkTheme(!isDarkTheme);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkTheme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnE,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAM,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEpD,KAAM,CAAAU,KAAK,CAAG,CACZF,WAAW,CACXG,UAAU,CAAEH,WAAW,CAAG,SAAS,CAAG,SAAS,CAC/CI,IAAI,CAAEJ,WAAW,CAAG,SAAS,CAAG,SAAS,CACzCK,OAAO,CAAEL,WAAW,CAAG,SAAS,CAAG,SAAS,CAC5CM,SAAS,CAAEN,WAAW,CAAG,SAAS,CAAG,SAAS,CAC9CO,aAAa,CAAEP,WAAW,CAAG,oBAAoB,CAAG,0BAA0B,CAC9EQ,cAAc,CAAER,WAAW,CAAG,2BAA2B,CAAG,qBAAqB,CACjFS,UAAU,CAAET,WAAW,CAAG,0BAA0B,CAAG,oBAAoB,CAC3EU,MAAM,CAAEV,WAAW,CAAG,kCAAkC,CAAG,8BAA8B,CACzFW,UAAU,CAAEX,WAAW,CAAG,SAAS,CAAG,SACxC,CAAC,CAED,KAAM,CAAAY,WAAW,CAAGA,CAAA,GAAM,CACxBX,cAAc,CAAC,CAACD,WAAW,CAAC,CAC9B,CAAC,CAED,mBACEL,IAAA,CAACC,YAAY,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEZ,KAAK,CAAEF,WAAW,CAAEY,WAAY,CAAE,CAAAb,QAAA,CAC/DA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAgB,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGvB,UAAU,CAACG,YAAY,CAAC,CACxC,GAAIoB,OAAO,GAAKC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAF,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}